#ifdef SHADOW_MAPPING
#ifdef LOWEND_SHADOWS
#include "Shadow1Tap.cg"
#else
#include "Shadow4Tap.cg"
#endif
#endif

                 

void mainVS(float4 pos    : POSITION,
          float3 normal : NORMAL,
          float2 tex    : TEXCOORD0,
          
          uniform float4x4 worldViewProjMatrix,
          uniform float4x4 worldMatrix,
		  uniform float2 scale0,
          uniform float2 scale1,
          uniform float2 scale2,
          uniform float2 scale3,
          uniform float2 scale4,


          //Directional light
          uniform float4 lightDir0,
          uniform float4 lightDiffuseColor0,
          
          //Point lights
          uniform float4 lightPos1,
          uniform float4 lightDiffuseColor1,
          uniform float4 lightAttenuation1,
          uniform float4 lightPos2,
          uniform float4 lightDiffuseColor2,
          uniform float4 lightAttenuation2,

          //Fog
          uniform float4 fogParams,
          uniform float4 fogColor,
          
          uniform float4 ambient,
          
          out float4 oPos      : POSITION,
          out float3 oColor    : COLOR,
          out float4 oDirectionalColor : TEXCOORD7, // Dynamic color based on the single sun directional light. the w value is just the z-coordinate of the vertex, packed here.
          out float4 oTex12     : TEXCOORD0,
          out float4 oTex34     : TEXCOORD1, //needed to pack "oTex3" to the same variable as oTex2
          out float2 oTex0   : TEXCOORD2,//blendtexture uvs
          out float4 oFog      : TEXCOORD3
#ifdef SHADOW_MAPPING
         ,out float4 oShadowTex0 : TEXCOORD4
#ifdef PSSM_SHADOWS
         ,out float4 oShadowTex1 : TEXCOORD5
         ,out float4 oShadowTex2 : TEXCOORD6 // Stores the generated texcoords for the shadow map. We support only one dynamic light at a time.
#endif
#endif
    )
{
	oPos = mul(worldViewProjMatrix, pos);
	
    oTex12.xy = tex / scale1;
    oTex12.zw = tex / scale2;
    oTex34.xy = tex / scale3;
    oTex34.zw = tex / scale4;
	oTex0 = tex / scale0;
    
    
    float4 worldPos = mul(worldMatrix, pos);
	

    // Calculate point light directions and distances    
    float3 lightVec1 = lightPos1.xyz - (pos.xyz * lightPos1.w);
    float dist1 = length(lightVec1);
    float3 lightDir1 = lightVec1 / dist1;
    
    float3 lightVec2 = lightPos2.xyz - (pos.xyz * lightPos2.w);
    float dist2 = length(lightVec2);
    float3 lightDir2 = lightVec2 / dist2;
    
    //Determine attenuations for lights
    float lightAtten1 = 1 / (lightAttenuation1.y + (lightAttenuation1.z * dist1) + (lightAttenuation1.w * (dist1*dist1)));
    float lightAtten2 = 1 / (lightAttenuation2.y + (lightAttenuation2.z * dist2) + (lightAttenuation2.w * (dist2*dist2)));
    
    oColor = ambient + (saturate(dot(lightDir1, normal)) * lightDiffuseColor1) * lightAtten1 +
                       (saturate(dot(lightDir2, normal)) * lightDiffuseColor2) * lightAtten2;
                       
	oDirectionalColor = (saturate(dot(lightDir0.xyz, normal)) * lightDiffuseColor0);
                       
    //Fog params packed as: exp_density, linear_start, linear_end, 1.0 / (linear_end - linear_start)
    //Store fog density to w
    oFog.w = clamp((fogParams.z-oPos.z)/(fogParams.z-fogParams.y), 0, 1);
    //And color to xyz
    oFog.xyz = fogColor.rgb;

#ifdef SHADOW_MAPPING
    // Shadow view-proj. Need to output all four coordinates for proper clipping (well, could potentially optimize one away, but not that useful).
    oDirectionalColor.w = oPos.z;
    oShadowTex0 = mul(lightViewProj0, worldPos);
#ifdef PSSM_SHADOWS
    oShadowTex1 = mul(lightViewProj1, worldPos);
    oShadowTex2 = mul(lightViewProj2, worldPos);
#endif
#endif
}

void mainPS(float4 pos    : POSITION,
          float3 color  : COLOR,
          float4 directionalColor : TEXCOORD7,
          float4 tex12   : TEXCOORD0,
          float4 tex34   : TEXCOORD1,
          float2 tex0 : TEXCOORD2, //Weights for blending the texture
          float4 fog    : TEXCOORD3,
#ifdef SHADOW_MAPPING
          float4 shadowTex0 : TEXCOORD4,
#ifdef PSSM_SHADOWS
	  float4 shadowTex1 : TEXCOORD5,
	  float4 shadowTex2 : TEXCOORD6,
#endif
#endif
          uniform sampler2D map0 : register(s0), //weigths
          uniform sampler2D map1 : register(s1), //Detail0
          uniform sampler2D map2 : register(s2), //Detail1
          uniform sampler2D map3 : register(s3), //Detail2
          uniform sampler2D map4 : register(s4), //Detail3
          uniform sampler2D shadowMap0 : register(s5),
#ifdef PSSM_SHADOWS
	  uniform sampler2D shadowMap1 : register(s6),
	  uniform sampler2D shadowMap2 : register(s7),
#endif
          out float4 col: COLOR)
{
    //Get texture and their weights
	float4 weights = tex2D(map0, tex0);
    float4 c1 = tex2D(map1, tex12.xy) * weights.x;
    float4 c2 = tex2D(map2, tex12.zw) * weights.y;
    float4 c3 = tex2D(map3, tex34.xy) * weights.z;
    float4 c4 = tex2D(map4, tex34.zw) * weights.w;

    float lightness = 1.f;
#ifdef SHADOW_MAPPING
    // Do shadow. note: shadow color is superceded by fog - intentional to provide a nice fade.
    
#ifdef PSSM_SHADOWS
			if (directionalColor.w <= 3.5f)	
			{
				#ifdef LOWEND_SHADOWS
				lightness = SampleShadowMap1TapPCF(shadowMap0, shadowTex0);
				#else
				lightness = SampleShadowMap4TapPCF(shadowMap0, shadowTex0, invShadowmapSize, directionalColor.w);
				#endif

			}
			else if (directionalColor.w <= 11.f)
			{	
				#ifdef LOWEND_SHADOWS
				lightness = SampleShadowMap1TapPCF(shadowMap1, shadowTex1);
				#else
				lightness = SampleShadowMap4TapPCF(shadowMap1, shadowTex1, invShadowmapSize, directionalColor.w);
				#endif
			}
			else
			{
				#ifdef LOWEND_SHADOWS
				lightness = SampleShadowMap1TapPCF(shadowMap2, shadowTex2);
				#else
				lightness = SampleShadowMap4TapPCF(shadowMap2, shadowTex2, invShadowmapSize, directionalColor.w);
				#endif

			}
#else
			#ifdef LOWEND_SHADOWS
			lightness = SampleShadowMap1TapPCF(shadowMap0, shadowTex0);
			#else
			lightness = SampleShadowMap4TapPCF(shadowMap0, shadowTex0, invShadowmapSize, directionalColor.w);
			#endif
#endif
#endif

    //Combine textures and the shadow map lighting value.
    col.rgb = (c1.rgb + c2.rgb + c3.rgb + c4.rgb) * (color + (lightness*0.5f+0.5f) * directionalColor.rgb);
            
    //Fog
    //color * fogParams.w + fogParams.xyz * (1.f - fogParams.w);

    col.rgb = col.rgb * fog.w + fog.xyz * (1.f - fog.w);
    col.a = 1;
}

